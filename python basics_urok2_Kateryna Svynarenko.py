# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать
# функцию type() для проверки типа. Элементы списка можно не запрашивать у
# пользователя, а указать явно, в программе.

list1 = [1, 34, 'abcd', 'hello', True, 32.1, 25]
for el in list1:
    print(type(el))

# 2. Для списка реализовать обмен значений соседних элементов. Значениями
# обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном
# количестве элементов последний сохранить на своём месте. Для заполнения
# списка элементов нужно использовать функцию input().
list1 = input("Введите элементы списка через пробелы: ").split()
list2 = []
if len(list1) % 2 == 0:
    for i in range(0, len(list1), 2):
        a = list1[i]
        b = list1[i+1]
        a, b = b, a
        list2.append(a)
        list2.append(b)
else:
    for i in range(0, len(list1) - 1, 2):
        l_idx = len(list1) - 1
        a = list1[i]
        b = list1[i+1]
        a, b = b, a
        list2.append(a)
        list2.append(b)
    list2.append(list1[l_idx])
print(list2)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить,
# к какому времени года относится месяц (зима, весна, лето, осень). Напишите
# решения через list и dict.
month = int(input("Введите месяц числом от 1 до 12: "))
if month > 2 and month < 6:
    print(f"{month}й месяц - это весна")
elif month > 5 and month < 9:
    print(f"{month}й месяц - это лето")
elif month > 8 and month < 12:
    print(f"{month}й месяц - это осень")
elif month <3 or month == 12:
    print(f"{month}й месяц - это зима")
else:
    print(f"Вы ввели число вне заданного спектра ")

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки нужно пронумеровать. Если
# слово длинное, выводить только первые 10 букв в слове.
string1 = input("Введите строку из нескольких слов, разделённых пробелами: ")
list1 = string1.split()
for ind, el in enumerate(list1):
    print(ind, el[:9])

# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных
# чисел, который не возрастает. У пользователя нужно запрашивать новый
# элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми
# значениями, то новый элемент с тем же значением должен разместиться после
# них. Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3,
# 2. Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2. Пользователь
# ввёл число 8. Результат: 8, 7, 5, 3, 3, 2. Пользователь ввёл число 1.
# Результат: 7, 5, 3, 3, 2, 1. Набор натуральных чисел можно задать сразу в
# коде, например, my_list = [7, 5, 3, 3, 2].
my_list = [7, 4, 3, 3, 1]
a = int(input("Введите число от 1 до 9: "))
if a in my_list:
    b = my_list.count(a)
    my_list.insert((my_list.index(a)+b), a)
else:
    my_list.append(a)
my_list.sort(reverse = True)
print(my_list)