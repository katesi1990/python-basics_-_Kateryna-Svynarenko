'''1. Реализовать скрипт, в котором должна быть предусмотрена функция
расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в
часах*ставка в час) + премия. Во время выполнения расчёта для конкретных
значений необходимо запускать скрипт с параметрами.'''
from sys import argv

hrs, rate, bonus = argv
#salary = hrs * rate + bonus

print(hrs * rate + bonus)

'''2. Представлен список чисел. Необходимо вывести элементы исходного 
списка, значения которых больше предыдущего элемента. Подсказка: элементы, 
удовлетворяющие условию, оформить в виде списка. Для его формирования 
используйте генератор. Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 
10, 7, 1, 78, 123, 55]. Результат: [12, 44, 4, 10, 78, 123]'''

my_list = [123, 67, 87, 1, 5, 78, 33, 45]
new_list = []
ind = len(my_list)
new_list = [el for el in my_list if el > ind-1]
print(new_list)

'''3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Решите задание в одну строку. Подсказка: используйте функцию range() и 
генератор.'''

nums = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
print(nums)

'''4. Представлен список чисел. Определите элементы списка, не имеющие 
повторений. Сформируйте итоговый массив чисел, соответствующих требованию. 
Элементы выведите в порядке их следования в исходном списке. Для выполнения 
задания обязательно используйте генератор. Пример исходного списка: [2, 2, 
2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]. Результат: [23, 1, 3, 10, 4, 11]'''

list1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list1_dist = [el for el in list1 if list1.count(el) == 1]
print(list1_dist)

'''5. Реализовать формирование списка, используя функцию range() и 
возможности генератора. В список должны войти чётные числа от 100 до 1000 (
включая границы). Нужно получить результат вычисления произведения всех 
элементов списка. Подсказка: использовать функцию reduce().'''

from functools import reduce
list2 = [el for el in range(100, 1001) if el % 2 == 0]
print(reduce(lambda x, y: x * y, list2))

'''6. Реализовать два небольших скрипта: итератор, генерирующий целые числа, 
начиная с указанного; итератор, повторяющий элементы некоторого списка, 
определённого заранее. Подсказка: используйте функцию count() и cycle() 
модуля itertools. Обратите внимание, что создаваемый цикл не должен быть 
бесконечным. Предусмотрите условие его завершения. #### Например, в первом 
задании выводим целые числа, начиная с 3. При достижении числа 10 — 
завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором 
повторение элементов списка прекратится.'''\

# Первый итератор:
from itertools import count
for el in count(20, 2):
    if el > 40:
        break
    else:
        print(el)
# Второй итератор:
from itertools import cycle
num_list = [2, 5, 67, 78, 34, 12, 3, 7]
a = 0
for el in cycle(num_list):
    if a > 15:
        break
    else:
        print(el)
        a += 1

'''7. Реализовать генератор с помощью функции с ключевым словом yield, 
создающим очередное значение. При вызове функции должен создаваться 
объект-генератор. Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. В цикле нужно выводить только 
первые n чисел, начиная с 1! и до n!. Подсказка: факториал числа n — 
произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 
= 24.'''

def fact():
    list_g = []
    n = int(input("Введите целое положительное число: "))
    generator = (el for el in range(1, n+1))
    for el in generator:
        #yield(el)
        list_g.append(el)
    #print(list_g)
    a = list_g[-1]
    c = 1
    for i in range(1, a+1):
        c *= i
        print(c)

fact()



